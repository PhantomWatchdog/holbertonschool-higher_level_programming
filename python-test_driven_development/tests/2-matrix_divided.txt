# Test for function that divides all elements of a matrix by a given number

>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

# Test case 1: Dividing each element of a 2x2 matrix by 2
>>> matrix = [[1, 2], [3, 4]]
>>> divisor = 2
>>> matrix_divided(matrix, divisor)
[[0.5, 1.0], [1.5, 2.0]]


# Test case 2: Dividing each element of a 3x3 matrix by 3
>>> matrix = [[10, 20, 30], [40, 50, 60], [70, 80, 90]]
>>> divisor = 3
>>> matrix_divided(matrix, divisor)
[[3.33, 6.67, 10.0], [13.33, 16.67, 20.0], [23.33, 26.67, 30.0]]


# Test case 3: Dividing each element of a 1x1 matrix by 5
>>> matrix = [[100]]
>>> divisor = 5
>>> matrix_divided(matrix, divisor)
[[20.0]]

# Test case 4: Dividing each element of a 2x2 matrix by 1.5
>>> matrix = [[1.5, 3.0], [4.5, 6.0]]
>>> divisor = 1.5
>>> matrix_divided(matrix, divisor)
[[1.0, 2.0], [3.0, 4.0]]

# Test case 5: Dividing each element of 3x3 matrix by 0
>>> matrix = [[1, 2], [3, 4]]
>>> divisor = 0
>>> matrix_divided(matrix, divisor)
Traceback (most recent call last):
ZeroDivisionError: division by zero

# Test case 6: Dividing each element of 2x2 matrix by '2'
>>> matrix = [[1, 2], [3, 4]]
>>> divisor = '2'
>>> matrix_divided(matrix, divisor)
Traceback (most recent call last):
TypeError: div must be a number

# Test case 7: Dividing each element of empty matrix
>>> matrix = []
>>> divisor = 2
>>> matrix_divided(matrix, divisor)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

# Test case 8: Non uniform row length
>>> matrix = [[1, 2], [3, 4, 5]]
>>> divisor = 2
>>> matrix_divided(matrix, divisor)
Traceback (most recent call last):
TypeError: Each row of the matrix must have the same size

# Test case 9: Non numeric matrix element
>>> matrix = [[1, 2], [3, '4']]
>>> divisor = 3
>>> matrix_divided(matrix, divisor)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

# Test case 10: Dividing by float inf in 2x2 matrix
>>> matrix = [[1, 2], [5, 6]]
>>> divisor = float('inf')
>>> matrix_divided(matrix, divisor)
[[0.0, 0.0], [0.0, 0.0]]

# Test case 11: Missing one argument
>>> matrix = [[1, 2], [5, 6]]
>>> divisor = 2
>>> matrix_divided(None, 2)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

# Test case 12: Matrix is not a matrix
>>> matrix = ["World"]
>>> divisor = 2
>>> matrix_divided(matrix, divisor)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats
